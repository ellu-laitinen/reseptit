[{"C:\\Users\\Ellu\\Desktop\\React projects\\reseptit\\src\\index.js":"1","C:\\Users\\Ellu\\Desktop\\React projects\\reseptit\\src\\App.js":"2","C:\\Users\\Ellu\\Desktop\\React projects\\reseptit\\src\\NavBar\\NavBar.js":"3","C:\\Users\\Ellu\\Desktop\\React projects\\reseptit\\src\\Recipes\\Recipes.js":"4","C:\\Users\\Ellu\\Desktop\\React projects\\reseptit\\src\\Recipes\\Breakfasts\\Breakfasts.js":"5","C:\\Users\\Ellu\\Desktop\\React projects\\reseptit\\src\\Recipes\\Snacks\\Snacks.js":"6","C:\\Users\\Ellu\\Desktop\\React projects\\reseptit\\src\\Recipes\\FullRecipe.js":"7","C:\\Users\\Ellu\\Desktop\\React projects\\reseptit\\src\\Recipes\\RecipeCard.js":"8","C:\\Users\\Ellu\\Desktop\\React projects\\reseptit\\src\\Recipes\\Lunch\\Lunch.js":"9","C:\\Users\\Ellu\\Desktop\\React projects\\reseptit\\src\\Recipes\\Dinner\\Dinner.js":"10","C:\\Users\\Ellu\\Desktop\\React projects\\reseptit\\src\\aws-exports.js":"11","C:\\Users\\Ellu\\Desktop\\React projects\\reseptit\\src\\graphql\\mutations.js":"12","C:\\Users\\Ellu\\Desktop\\React projects\\reseptit\\src\\graphql\\queries.js":"13","C:\\Users\\Ellu\\Desktop\\React projects\\reseptit\\src\\Theme\\theme.js":"14","C:\\Users\\Ellu\\Desktop\\React projects\\reseptit\\src\\AddRecipe\\AddRecipe.js":"15"},{"size":277,"mtime":1617650206621,"results":"16","hashOfConfig":"17"},{"size":1126,"mtime":1618069039580,"results":"18","hashOfConfig":"17"},{"size":1919,"mtime":1618045594491,"results":"19","hashOfConfig":"17"},{"size":0,"mtime":1618068953854,"results":"20","hashOfConfig":"17"},{"size":4035,"mtime":1618132511443,"results":"21","hashOfConfig":"17"},{"size":3201,"mtime":1618132091313,"results":"22","hashOfConfig":"17"},{"size":3738,"mtime":1618132344860,"results":"23","hashOfConfig":"17"},{"size":879,"mtime":1618045903416,"results":"24","hashOfConfig":"17"},{"size":3189,"mtime":1618132517787,"results":"25","hashOfConfig":"17"},{"size":3273,"mtime":1618131396337,"results":"26","hashOfConfig":"17"},{"size":852,"mtime":1618044991835,"results":"27","hashOfConfig":"17"},{"size":3937,"mtime":1618044987555,"results":"28","hashOfConfig":"17"},{"size":2473,"mtime":1618044987415,"results":"29","hashOfConfig":"17"},{"size":689,"mtime":1618045924929,"results":"30","hashOfConfig":"17"},{"size":3443,"mtime":1618129003921,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"15ilex8",{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"34"},"C:\\Users\\Ellu\\Desktop\\React projects\\reseptit\\src\\index.js",[],["69","70"],"C:\\Users\\Ellu\\Desktop\\React projects\\reseptit\\src\\App.js",["71"],"import \"./App.css\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n  Link,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport { withAuthenticator } from \"@aws-amplify/ui-react\";\r\n\r\nimport { ThemeProvider } from \"@material-ui/core/styles\";\r\n\r\nimport NavBar from \"./NavBar/NavBar\";\r\nimport Breakfasts from \"./Recipes/Breakfasts/Breakfasts\";\r\nimport Snacks from \"./Recipes/Snacks/Snacks\";\r\nimport Lunch from \"./Recipes/Lunch/Lunch\";\r\nimport Dinner from \"./Recipes/Dinner/Dinner\";\r\n\r\nimport theme from \"./Theme/theme\";\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Router>\r\n        <NavBar />\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Redirect to=\"/breakfast\" />\r\n          </Route>\r\n          <Route path=\"/breakfast\" exact component={Breakfasts}></Route>\r\n          <Route path=\"/snacks\" exact component={Snacks}></Route>\r\n          <Route path=\"/lunch\" exact component={Lunch}></Route>\r\n          <Route path=\"/dinner\" exact component={Dinner}></Route>\r\n        </Switch>\r\n      </Router>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default withAuthenticator(App);\r\n","C:\\Users\\Ellu\\Desktop\\React projects\\reseptit\\src\\NavBar\\NavBar.js",["72"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport { AmplifySignOut } from \"@aws-amplify/ui-react\";\r\n\r\nimport \"./NavBar.css\";\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  link: {\r\n    color: \"purple\",\r\n    textDecoration: \"none\",\r\n    textTransform: \"uppercase\",\r\n    \"&:hover\": {\r\n      textDecoration: \"underline\",\r\n    },\r\n  },\r\n  title: {\r\n    color: \"purple\",\r\n  },\r\n}));\r\n\r\nconst NavBar = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <div /* className={classes.root} */>\r\n      <AppBar position=\"static\">\r\n        <Toolbar className=\"toolbar\">\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            <Link to=\"/\" className={classes.link}>\r\n              Ellun reseptipankki\r\n            </Link>\r\n          </Typography>\r\n          <Grid container spacing={2} justify=\"flex-end\">\r\n            <Grid item>\r\n              <Link to=\"/breakfast\" className={classes.link}>\r\n                Aamupalat\r\n              </Link>\r\n            </Grid>\r\n            <Grid item>\r\n              <Link to=\"/snacks\" className={classes.link}>\r\n                Väli- ja iltapalat\r\n              </Link>\r\n            </Grid>\r\n            <Grid item>\r\n              <Link to=\"/lunch\" className={classes.link}>\r\n                Lounaat\r\n              </Link>\r\n            </Grid>\r\n            <Grid item>\r\n              <Link to=\"/dinner\" className={classes.link}>\r\n                Päiväruuat\r\n              </Link>\r\n            </Grid>\r\n            <AmplifySignOut />\r\n          </Grid>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","C:\\Users\\Ellu\\Desktop\\React projects\\reseptit\\src\\Recipes\\Recipes.js",[],"C:\\Users\\Ellu\\Desktop\\React projects\\reseptit\\src\\Recipes\\Breakfasts\\Breakfasts.js",["73","74","75"],"C:\\Users\\Ellu\\Desktop\\React projects\\reseptit\\src\\Recipes\\Snacks\\Snacks.js",["76","77"],"import React, { useEffect, useState } from \"react\";\r\nimport RecipeCard from \"../RecipeCard\";\r\nimport {\r\n  Link,\r\n  useRouteMatch,\r\n  Switch,\r\n  Route,\r\n  BrowserRouter as Router,\r\n} from \"react-router-dom\";\r\nimport { listSnacks } from \"../../graphql/queries\";\r\nimport {\r\n  deleteSnack as deleteSnacksMutation,\r\n  createSnack as createSnackMutation,\r\n} from \"../../graphql/mutations\";\r\nimport { API, Storage } from \"aws-amplify\";\r\nimport { Card, Grid } from \"@material-ui/core\";\r\n\r\nimport FullRecipe from \"../FullRecipe\";\r\nimport AddRecipe from \"../../AddRecipe/AddRecipe\";\r\n\r\nconst Snacks = () => {\r\n  const [snacks, setSnacks] = useState([]);\r\n  let match = useRouteMatch();\r\n  const initialState = {\r\n    title: \"\",\r\n    ingredients: \"\",\r\n    instructions: \"\",\r\n  };\r\n  const [snackData, setSnackData] = useState(initialState);\r\n\r\n  useEffect(() => {\r\n    fetchSnacks();\r\n  }, []);\r\n\r\n  async function fetchSnacks() {\r\n    const apiData = await API.graphql({ query: listSnacks });\r\n    const snackFromAPI = apiData.data.listSnacks.items;\r\n    await Promise.all(\r\n      snackFromAPI.map(async (recipe) => {\r\n        if (recipe.image) {\r\n          const image = await Storage.get(recipe.image);\r\n          recipe.image = image;\r\n          //      console.log(recipe.image);\r\n        }\r\n      })\r\n    );\r\n    setSnacks(snackFromAPI);\r\n    console.log(apiData.data.listSnacks.items);\r\n  }\r\n\r\n  async function deleteSnack({ id }) {\r\n    const newSnackArray = snacks.filter((recipe) => recipe.id !== id);\r\n    setSnacks(newSnackArray);\r\n    await API.graphql({\r\n      query: deleteSnacksMutation,\r\n      variables: { input: { id } },\r\n    });\r\n  }\r\n\r\n  // create a new recipe\r\n  async function createSnack() {\r\n    if (!snackData.title || !snackData.ingredients || !snackData.instructions)\r\n      return;\r\n    await API.graphql({\r\n      query: createSnackMutation,\r\n      variables: { input: snackData },\r\n    });\r\n    if (snackData.image) {\r\n      const image = await Storage.get(snackData.image);\r\n      snackData.image = image;\r\n    }\r\n    setSnacks([...snacks, snackData]);\r\n    fetchSnacks();\r\n    setSnackData(initialState);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Router>\r\n        <Switch>\r\n          <Route path={`/:recipe/:postId`}>\r\n            <FullRecipe />\r\n          </Route>\r\n          <Route path={match.path}>\r\n            <Grid container spacing={2}>\r\n              {snacks.map((item) => {\r\n                return (\r\n                  <Grid item xs={12} sm={4}>\r\n                    <RecipeCard\r\n                      title={item.title}\r\n                      img={item.image}\r\n                      link={`${match.url}/${item.id}`}\r\n                      remove={() => deleteSnack(item)}\r\n                    />\r\n                  </Grid>\r\n                );\r\n              })}\r\n              <Grid item xs={12}>\r\n                <AddRecipe\r\n                  recipeData={snackData}\r\n                  setRecipeData={setSnackData}\r\n                  createRecipe={createSnack}\r\n                  category={\"välipala\"}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Snacks;\r\n","C:\\Users\\Ellu\\Desktop\\React projects\\reseptit\\src\\Recipes\\FullRecipe.js",["78","79","80","81"],"import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useParams, useRouteMatch } from \"react-router-dom\";\r\nimport { Card } from \"@material-ui/core\";\r\n\r\nimport * as queries from \"../graphql/queries\";\r\nimport { API, Storage } from \"aws-amplify\";\r\nimport RecipeCard from \"./RecipeCard\";\r\n\r\nconst FullRecipe = () => {\r\n  const [loadedRecipe, setLoadedRecipe] = useState(\"\");\r\n  let { postId } = useParams();\r\n  let { recipe } = useParams();\r\n\r\n  console.log(recipe);\r\n  console.log(postId);\r\n\r\n  useEffect(() => {\r\n    if (recipe === \"breakfast\") {\r\n      console.log(recipe);\r\n      fetchBreakfast();\r\n    }\r\n    if (recipe === \"dinner\") {\r\n      fetchDinner();\r\n    }\r\n    if (recipe === \"lunch\") {\r\n      fetchLunch();\r\n    }\r\n    if (recipe === \"snacks\") {\r\n      fetchSnack();\r\n    }\r\n  }, []);\r\n\r\n  async function fetchBreakfast() {\r\n    console.log(\"fetching breakfasts\");\r\n    const apiData = await API.graphql({\r\n      query: queries.getBreakfast,\r\n      variables: { id: postId },\r\n    });\r\n    console.log(apiData);\r\n    const recipeFromAPI = apiData.data.getBreakfast;\r\n    console.log(recipeFromAPI);\r\n    if (recipeFromAPI.image) {\r\n      console.log(recipeFromAPI);\r\n      const image = await Storage.get(recipeFromAPI.image);\r\n      recipeFromAPI.image = image;\r\n    }\r\n    setLoadedRecipe(recipeFromAPI);\r\n    console.log(recipeFromAPI);\r\n  }\r\n\r\n  async function fetchDinner() {\r\n    const apiData = await API.graphql({\r\n      query: queries.getDinner,\r\n      variables: { id: postId },\r\n    });\r\n    console.log(apiData);\r\n    const recipeFromAPI = apiData.data.getDinner;\r\n    console.log(recipeFromAPI);\r\n    if (recipeFromAPI.image) {\r\n      console.log(recipeFromAPI);\r\n      const image = await Storage.get(recipeFromAPI.image);\r\n      recipeFromAPI.image = image;\r\n    }\r\n    setLoadedRecipe(apiData.data.getDinner);\r\n    console.log(apiData.data.getDinner);\r\n  }\r\n\r\n  async function fetchLunch() {\r\n    const apiData = await API.graphql({\r\n      query: queries.getLunch,\r\n      variables: { id: postId },\r\n    });\r\n    console.log(apiData);\r\n    const recipeFromAPI = apiData.data.getLunch;\r\n    console.log(recipeFromAPI);\r\n    if (recipeFromAPI.image) {\r\n      console.log(recipeFromAPI);\r\n      const image = await Storage.get(recipeFromAPI.image);\r\n      recipeFromAPI.image = image;\r\n    }\r\n    setLoadedRecipe(apiData.data.getLunch);\r\n    console.log(apiData.data.getLunch);\r\n  }\r\n\r\n  async function fetchSnack() {\r\n    const apiData = await API.graphql({\r\n      query: queries.getSnack,\r\n      variables: { id: postId },\r\n    });\r\n    console.log(apiData);\r\n    const recipeFromAPI = apiData.data.getSnack;\r\n    console.log(recipeFromAPI);\r\n    if (recipeFromAPI.image) {\r\n      console.log(recipeFromAPI);\r\n      const image = await Storage.get(recipeFromAPI.image);\r\n      recipeFromAPI.image = image;\r\n    }\r\n    setLoadedRecipe(apiData.data.getSnack);\r\n    console.log(apiData.data.getSnack);\r\n  }\r\n\r\n  /*   useEffect(() => {\r\n    if (!loadedRecipe) {\r\n      axios\r\n        .get(\"http://localhost:3001/\" + recipe + \"/\" + postId)\r\n        .then((response) => {\r\n          console.log(response.data);\r\n          setLoadedRecipe(response.data);\r\n        });\r\n    }\r\n  }); */\r\n\r\n  console.log(loadedRecipe);\r\n  return (\r\n    <Card>\r\n      <h1>{loadedRecipe.title}</h1>\r\n      {/*   {loadedRecipe.ingredients.map((ing) => (\r\n          <ul>\r\n            <li>{ing.ingredients}</li>\r\n          </ul>\r\n        ))} */}\r\n\r\n      <p>{loadedRecipe.ingredients}</p>\r\n      <p>{loadedRecipe.instructions}</p>\r\n      <img\r\n        src={loadedRecipe.image}\r\n        alt={loadedRecipe.title}\r\n        style={{ width: 400 }}\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default FullRecipe;\r\n","C:\\Users\\Ellu\\Desktop\\React projects\\reseptit\\src\\Recipes\\RecipeCard.js",[],"C:\\Users\\Ellu\\Desktop\\React projects\\reseptit\\src\\Recipes\\Lunch\\Lunch.js",["82"],"C:\\Users\\Ellu\\Desktop\\React projects\\reseptit\\src\\Recipes\\Dinner\\Dinner.js",["83"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Link,\r\n  useRouteMatch,\r\n  Switch,\r\n  Route,\r\n  BrowserRouter as Router,\r\n} from \"react-router-dom\";\r\nimport { listDinners } from \"../../graphql/queries\";\r\nimport { API, Storage } from \"aws-amplify\";\r\nimport {\r\n  deleteDinner as deleteDinnerMutation,\r\n  createDinner as createDinnerMutation,\r\n} from \"../../graphql/mutations\";\r\nimport RecipeCard from \"../RecipeCard\";\r\n\r\nimport AddRecipe from \"../../AddRecipe/AddRecipe\";\r\nimport FullRecipe from \"../FullRecipe\";\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\nconst Dinner = () => {\r\n  const [dinner, setDinner] = useState([]);\r\n  let match = useRouteMatch();\r\n\r\n  const initialState = {\r\n    title: \"\",\r\n    ingredients: \"\",\r\n    instructions: \"\",\r\n  };\r\n  const [dinnerData, setDinnerData] = useState(initialState);\r\n\r\n  useEffect(() => {\r\n    fetchDinners();\r\n  }, []);\r\n\r\n  async function fetchDinners() {\r\n    const apiData = await API.graphql({ query: listDinners });\r\n    const dinnerFromAPI = apiData.data.listDinners.items;\r\n    await Promise.all(\r\n      dinnerFromAPI.map(async (recipe) => {\r\n        if (recipe.image) {\r\n          const image = await Storage.get(recipe.image);\r\n          recipe.image = image;\r\n          //      console.log(recipe.image);\r\n        }\r\n      })\r\n    );\r\n    setDinner(dinnerFromAPI);\r\n    //  console.log(breakfastFromAPI);\r\n  }\r\n\r\n  // DELETE dinner\r\n\r\n  async function deleteDinner({ id }) {\r\n    const newDinnerArray = dinner.filter((recipe) => recipe.id !== id);\r\n    setDinner(newDinnerArray);\r\n    await API.graphql({\r\n      query: deleteDinnerMutation,\r\n      variables: { input: { id } },\r\n    });\r\n  }\r\n\r\n  // create a new recipe\r\n  async function createDinner() {\r\n    if (\r\n      !dinnerData.title ||\r\n      !dinnerData.ingredients ||\r\n      !dinnerData.instructions\r\n    )\r\n      return;\r\n    await API.graphql({\r\n      query: createDinnerMutation,\r\n      variables: { input: dinnerData },\r\n    });\r\n    if (dinnerData.image) {\r\n      const image = await Storage.get(dinnerData.image);\r\n      dinnerData.image = image;\r\n    }\r\n    setDinner([...dinner, dinnerData]);\r\n    fetchDinners();\r\n    setDinnerData(initialState);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Router>\r\n        <Switch>\r\n          <Route path={\"/:recipe/:postId\"}>\r\n            <FullRecipe />\r\n          </Route>\r\n          <Route path={match.path}>\r\n            <Grid container spacing={2}>\r\n              {dinner.map((item) => {\r\n                return (\r\n                  <Grid item xs={12} sm={4}>\r\n                    <RecipeCard\r\n                      title={item.title}\r\n                      img={item.image}\r\n                      link={`${match.url}/${item.id}`}\r\n                      remove={() => deleteDinner(item)}\r\n                    />\r\n                  </Grid>\r\n                );\r\n              })}\r\n              <Grid item xs={12}>\r\n                <AddRecipe\r\n                  recipeData={dinnerData}\r\n                  setRecipeData={setDinnerData}\r\n                  createRecipe={createDinner}\r\n                  category={\"päiväruoka\"}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dinner;\r\n","C:\\Users\\Ellu\\Desktop\\React projects\\reseptit\\src\\aws-exports.js",[],"C:\\Users\\Ellu\\Desktop\\React projects\\reseptit\\src\\graphql\\mutations.js",[],"C:\\Users\\Ellu\\Desktop\\React projects\\reseptit\\src\\graphql\\queries.js",[],"C:\\Users\\Ellu\\Desktop\\React projects\\reseptit\\src\\Theme\\theme.js",[],"C:\\Users\\Ellu\\Desktop\\React projects\\reseptit\\src\\AddRecipe\\AddRecipe.js",["84","85","86"],"import React, { useState, useEffect } from \"react\";\r\nimport { API, Storage } from \"aws-amplify\";\r\nimport {\r\n  Grid,\r\n  Card,\r\n  Typography,\r\n  InputLabel,\r\n  TextField,\r\n  TextareaAutosize,\r\n  Button,\r\n} from \"@material-ui/core\";\r\n\r\nconst AddRecipe = ({ recipeData, setRecipeData, createRecipe, category }) => {\r\n  /*   useEffect(() => {\r\n    fetchRecipes();\r\n    console.log(\"fetch1\");\r\n  }, []); */\r\n\r\n  async function onChange(e) {\r\n    if (!e.target.files[0]) return;\r\n    const file = e.target.files[0];\r\n    setRecipeData({ ...recipeData, image: file.name });\r\n    await Storage.put(file.name, file);\r\n    /*     fetchRecipes(); */\r\n  }\r\n\r\n  const recipeHandler = (e) => {\r\n    setRecipeData({\r\n      ...recipeData,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  /*   async function fetchRecipes() {\r\n    const apiData = await API.graphql({ query: [listRecipes] });\r\n    const recipeFromAPI = apiData.data[listRecipes].items;\r\n    console.log(recipeFromAPI);\r\n    await Promise.all(\r\n      recipeFromAPI.map(async (recipe) => {\r\n        if (recipe.image) {\r\n          const image = await Storage.get(recipe.image);\r\n          recipe.image = image;\r\n        }\r\n        return recipe;\r\n      })\r\n    );\r\n    setRecipe(apiData.data.listRecipes.items);\r\n  } */\r\n  /* \r\n  async function createRecipe() {\r\n    if (\r\n      !recipeData.title ||\r\n      !recipeData.ingredients ||\r\n      !recipeData.instructions\r\n    )\r\n      return;\r\n    await API.graphql({\r\n      query: createRecipeMutation,\r\n      variables: { input: recipeData },\r\n    });\r\n    if (recipeData.image) {\r\n      const image = await Storage.get(recipeData.image);\r\n      recipeData.image = image;\r\n    }\r\n    setRecipe([...recipe, recipeData]);\r\n  } */\r\n\r\n  return (\r\n    <Card style={{ margin: \"2rem\" }}>\r\n      <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\r\n        <Grid item>\r\n          <Typography>Lisää {category}</Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <InputLabel>Reseptin nimi</InputLabel>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            type=\"text\"\r\n            name=\"title\"\r\n            value={recipeData.title}\r\n            onChange={recipeHandler}\r\n          ></TextField>\r\n        </Grid>\r\n        <Grid item>\r\n          <InputLabel>Ainesosat</InputLabel>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            type=\"text\"\r\n            name=\"ingredients\"\r\n            value={recipeData.ingredients}\r\n            onChange={recipeHandler}\r\n          ></TextField>\r\n          {/*  <Button onClick={addIng}>Lisää listaan</Button> */}\r\n        </Grid>\r\n        {/*       {newRecipe.ingredients.map((i) => (\r\n        <div>\r\n          <li value={i.ingredients}>{i.ingredients}</li>\r\n          <button onClick={() => removeIng(i.ingredients)}>poista</button>\r\n        </div>\r\n      ))} */}\r\n        <Grid item>\r\n          <InputLabel>Ohjeet</InputLabel>\r\n          <TextareaAutosize\r\n            rowsMin={10}\r\n            type=\"text\"\r\n            name=\"instructions\"\r\n            value={recipeData.instructions}\r\n            onChange={recipeHandler}\r\n          ></TextareaAutosize>\r\n        </Grid>\r\n        <Grid item>\r\n          <input type=\"file\" onChange={onChange} />\r\n        </Grid>\r\n        <Button onClick={createRecipe}>Lisää resepti</Button>\r\n      </Grid>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default AddRecipe;\r\n",{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":6,"column":3,"nodeType":"93","messageId":"94","endLine":6,"endColumn":7},{"ruleId":"91","severity":1,"message":"95","line":7,"column":8,"nodeType":"93","messageId":"94","endLine":7,"endColumn":14},{"ruleId":"91","severity":1,"message":"96","line":3,"column":3,"nodeType":"93","messageId":"94","endLine":3,"endColumn":12},{"ruleId":"91","severity":1,"message":"92","line":4,"column":3,"nodeType":"93","messageId":"94","endLine":4,"endColumn":7},{"ruleId":"91","severity":1,"message":"97","line":19,"column":8,"nodeType":"93","messageId":"94","endLine":19,"endColumn":13},{"ruleId":"91","severity":1,"message":"92","line":4,"column":3,"nodeType":"93","messageId":"94","endLine":4,"endColumn":7},{"ruleId":"91","severity":1,"message":"98","line":16,"column":10,"nodeType":"93","messageId":"94","endLine":16,"endColumn":14},{"ruleId":"91","severity":1,"message":"97","line":2,"column":8,"nodeType":"93","messageId":"94","endLine":2,"endColumn":13},{"ruleId":"91","severity":1,"message":"99","line":3,"column":21,"nodeType":"93","messageId":"94","endLine":3,"endColumn":34},{"ruleId":"91","severity":1,"message":"100","line":8,"column":8,"nodeType":"93","messageId":"94","endLine":8,"endColumn":18},{"ruleId":"101","severity":1,"message":"102","line":32,"column":6,"nodeType":"103","endLine":32,"endColumn":8,"suggestions":"104"},{"ruleId":"91","severity":1,"message":"92","line":3,"column":3,"nodeType":"93","messageId":"94","endLine":3,"endColumn":7},{"ruleId":"91","severity":1,"message":"92","line":3,"column":3,"nodeType":"93","messageId":"94","endLine":3,"endColumn":7},{"ruleId":"91","severity":1,"message":"105","line":1,"column":17,"nodeType":"93","messageId":"94","endLine":1,"endColumn":25},{"ruleId":"91","severity":1,"message":"106","line":1,"column":27,"nodeType":"93","messageId":"94","endLine":1,"endColumn":36},{"ruleId":"91","severity":1,"message":"107","line":2,"column":10,"nodeType":"93","messageId":"94","endLine":2,"endColumn":13},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'useParams' is defined but never used.","'axios' is defined but never used.","'Card' is defined but never used.","'useRouteMatch' is defined but never used.","'RecipeCard' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchBreakfast', 'fetchDinner', 'fetchLunch', 'fetchSnack', and 'recipe'. Either include them or remove the dependency array.","ArrayExpression",["110"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'API' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"111","fix":"112"},"Update the dependencies array to be: [fetchBreakfast, fetchDinner, fetchLunch, fetchSnack, recipe]",{"range":"113","text":"114"},[827,829],"[fetchBreakfast, fetchDinner, fetchLunch, fetchSnack, recipe]"]