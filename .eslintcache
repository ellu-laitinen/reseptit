[{"C:\\Users\\elisabet\\Desktop\\reseptit\\src\\index.js":"1","C:\\Users\\elisabet\\Desktop\\reseptit\\src\\App.js":"2","C:\\Users\\elisabet\\Desktop\\reseptit\\src\\Theme\\theme.js":"3","C:\\Users\\elisabet\\Desktop\\reseptit\\src\\NavBar\\NavBar.js":"4","C:\\Users\\elisabet\\Desktop\\reseptit\\src\\Recipes\\Breakfasts\\Breakfasts.js":"5","C:\\Users\\elisabet\\Desktop\\reseptit\\src\\Recipes\\Lunch\\Lunch.js":"6","C:\\Users\\elisabet\\Desktop\\reseptit\\src\\Recipes\\Snacks\\Snacks.js":"7","C:\\Users\\elisabet\\Desktop\\reseptit\\src\\Recipes\\Dinner\\Dinner.js":"8","C:\\Users\\elisabet\\Desktop\\reseptit\\src\\Recipes\\FullRecipe.js":"9","C:\\Users\\elisabet\\Desktop\\reseptit\\src\\Recipes\\RecipeCard.js":"10","C:\\Users\\elisabet\\Desktop\\reseptit\\src\\Recipes\\AddRecipe.js":"11","C:\\Users\\elisabet\\Desktop\\reseptit\\src\\graphql\\mutations.js":"12","C:\\Users\\elisabet\\Desktop\\reseptit\\src\\graphql\\queries.js":"13","C:\\Users\\elisabet\\Desktop\\reseptit\\src\\aws-exports.js":"14","C:\\Users\\elisabet\\Desktop\\reseptit\\src\\Recipes\\EditRecipe.js":"15"},{"size":277,"mtime":1618291138818,"results":"16","hashOfConfig":"17"},{"size":1126,"mtime":1618291138818,"results":"18","hashOfConfig":"17"},{"size":833,"mtime":1618291138818,"results":"19","hashOfConfig":"17"},{"size":2324,"mtime":1618291138818,"results":"20","hashOfConfig":"17"},{"size":5180,"mtime":1618486313293,"results":"21","hashOfConfig":"17"},{"size":4240,"mtime":1618483279124,"results":"22","hashOfConfig":"17"},{"size":4296,"mtime":1618483279125,"results":"23","hashOfConfig":"17"},{"size":4314,"mtime":1618483279121,"results":"24","hashOfConfig":"17"},{"size":5457,"mtime":1618491057804,"results":"25","hashOfConfig":"17"},{"size":1445,"mtime":1618291138818,"results":"26","hashOfConfig":"17"},{"size":3971,"mtime":1618483279118,"results":"27","hashOfConfig":"17"},{"size":3937,"mtime":1618471648560,"results":"28","hashOfConfig":"17"},{"size":2473,"mtime":1618471648460,"results":"29","hashOfConfig":"17"},{"size":852,"mtime":1618471650970,"results":"30","hashOfConfig":"17"},{"size":3569,"mtime":1618491223676,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"x7nvjp",{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\elisabet\\Desktop\\reseptit\\src\\index.js",[],["68","69"],"C:\\Users\\elisabet\\Desktop\\reseptit\\src\\App.js",["70"],"import \"./App.css\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n  Link,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport { withAuthenticator } from \"@aws-amplify/ui-react\";\r\n\r\nimport { ThemeProvider } from \"@material-ui/core/styles\";\r\n\r\nimport NavBar from \"./NavBar/NavBar\";\r\nimport Breakfasts from \"./Recipes/Breakfasts/Breakfasts\";\r\nimport Snacks from \"./Recipes/Snacks/Snacks\";\r\nimport Lunch from \"./Recipes/Lunch/Lunch\";\r\nimport Dinner from \"./Recipes/Dinner/Dinner\";\r\n\r\nimport theme from \"./Theme/theme\";\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Router>\r\n        <NavBar />\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Redirect to=\"/breakfast\" />\r\n          </Route>\r\n          <Route path=\"/breakfast\" exact component={Breakfasts}></Route>\r\n          <Route path=\"/snacks\" exact component={Snacks}></Route>\r\n          <Route path=\"/lunch\" exact component={Lunch}></Route>\r\n          <Route path=\"/dinner\" exact component={Dinner}></Route>\r\n        </Switch>\r\n      </Router>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default withAuthenticator(App);\r\n","C:\\Users\\elisabet\\Desktop\\reseptit\\src\\Theme\\theme.js",[],"C:\\Users\\elisabet\\Desktop\\reseptit\\src\\NavBar\\NavBar.js",[],"C:\\Users\\elisabet\\Desktop\\reseptit\\src\\Recipes\\Breakfasts\\Breakfasts.js",["71","72","73","74"],"C:\\Users\\elisabet\\Desktop\\reseptit\\src\\Recipes\\Lunch\\Lunch.js",["75"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Link,\r\n  useRouteMatch,\r\n  Switch,\r\n  Route,\r\n  BrowserRouter as Router,\r\n} from \"react-router-dom\";\r\nimport { listLunchs } from \"../../graphql/queries\";\r\nimport {\r\n  deleteLunch as deleteLunchMutation,\r\n  createLunch as createLunchMutation,\r\n} from \"../../graphql/mutations\";\r\nimport { API, Storage } from \"aws-amplify\";\r\nimport RecipeCard from \"../RecipeCard\";\r\n\r\nimport FullRecipe from \"../FullRecipe\";\r\n\r\nimport { Grid, Typography } from \"@material-ui/core\";\r\n\r\nimport AddRecipe from \"../AddRecipe\";\r\n\r\nconst Lunch = () => {\r\n  const [lunch, setLunch] = useState([]);\r\n  const [ingredients, setIngredients] = useState([])\r\n  let match = useRouteMatch();\r\n  const initialState = {\r\n    title: \"\",\r\n    ingredients: \"\",\r\n    instructions: \"\",\r\n  };\r\n  const [lunchData, setLunchData] = useState(initialState);\r\n  const saveData = ({name, value}) => {\r\n    setLunchData({\r\n      ...lunchData,\r\n      [name]: value //stringify here separates all letters into individual strings, no errors\r\n    })\r\n  }\r\n\r\n  const changeIngHandler = (e) => {\r\n    setIngredients({\r\n     \r\n      [e.target.name]:e.target.value\r\n    })\r\n  }\r\n  const addIng = (e) =>  {\r\n\r\n    e.preventDefault();\r\n    saveData({\r\n      name:\"ingredients\",\r\n      value: [...lunchData.ingredients, ingredients.ingredients]  //stringify here: error, can't parse\r\n    })\r\n\r\n  /*   const ings = breakfastData.ingredients.map((i) => {\r\n      return (\r\n        i.ingredients\r\n      )\r\n      \r\n    }) */\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchLunches();\r\n  }, []);\r\n\r\n  async function fetchLunches() {\r\n    const apiData = await API.graphql({ query: listLunchs });\r\n    const lunchFromAPI = apiData.data.listLunchs.items;\r\n    console.log(apiData.data.listLunchs.items);\r\n    await Promise.all(\r\n      lunchFromAPI.map(async (recipe) => {\r\n        if (recipe.image) {\r\n          const image = await Storage.get(recipe.image);\r\n          recipe.image = image;\r\n          //      console.log(recipe.image);\r\n        }\r\n      })\r\n    );\r\n    setLunch(lunchFromAPI);\r\n  }\r\n\r\n  async function deleteLunch({ id }) {\r\n    const newLunchArray = lunch.filter((recipe) => recipe.id !== id);\r\n    setLunch(newLunchArray);\r\n    await API.graphql({\r\n      query: deleteLunchMutation,\r\n      variables: { input: { id } },\r\n    });\r\n  }\r\n\r\n  // create a new recipe\r\n  async function createLunch() {\r\n    if (!lunchData.title || !lunchData.ingredients || !lunchData.instructions)\r\n      return;\r\n      lunchData.ingredients = JSON.stringify(lunchData.ingredients)\r\n    let savedLunch = await API.graphql({\r\n      query: createLunchMutation,\r\n      variables: { input: lunchData },\r\n    });\r\n    if (lunchData.image) {\r\n      const savedImage = await Storage.get(lunchData.image);\r\n      savedLunch.data.createLunch.image = savedImage;\r\n    }\r\n    setLunch([...lunch, savedLunch.data.createLunch]);\r\n\r\n    setLunchData(initialState);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Router>\r\n        <Switch>\r\n          <Route path={\"/:category/:postId\"}>\r\n            <FullRecipe />\r\n          </Route>\r\n          <Route path={match.path}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"h5\">Lounaat</Typography>\r\n              </Grid>\r\n              {lunch.map((item) => {\r\n                return (\r\n                  <Grid item xs={12} sm={4}>\r\n                    <RecipeCard\r\n                      title={item.title}\r\n                      img={item.image}\r\n                      link={`${match.url}/${item.id}`}\r\n                      remove={() => deleteLunch(item)}\r\n                    />\r\n                  </Grid>\r\n                );\r\n              })}\r\n\r\n              <Grid item xs={12}>\r\n                <AddRecipe\r\n                  recipeData={lunchData}\r\n                  setRecipeData={setLunchData}\r\n                  createRecipe={createLunch}\r\n                  category={\"lounas\"}\r\n                  addIng={addIng}\r\n                  changeIngHandler={changeIngHandler}\r\n               \r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Lunch;\r\n","C:\\Users\\elisabet\\Desktop\\reseptit\\src\\Recipes\\Snacks\\Snacks.js",["76"],"import React, { useEffect, useState } from \"react\";\r\nimport RecipeCard from \"../RecipeCard\";\r\nimport {\r\n  Link,\r\n  useRouteMatch,\r\n  Switch,\r\n  Route,\r\n  BrowserRouter as Router,\r\n} from \"react-router-dom\";\r\nimport { listSnacks } from \"../../graphql/queries\";\r\nimport {\r\n  deleteSnack as deleteSnacksMutation,\r\n  createSnack as createSnackMutation,\r\n} from \"../../graphql/mutations\";\r\nimport { API, Storage } from \"aws-amplify\";\r\nimport { Typography, Grid } from \"@material-ui/core\";\r\n\r\nimport FullRecipe from \"../FullRecipe\";\r\nimport AddRecipe from \"../AddRecipe\";\r\n\r\nconst Snacks = () => {\r\n  const [snacks, setSnacks] = useState([]);\r\n  let match = useRouteMatch();\r\n\r\n  const [ingredients, setIngredients] = useState([])\r\n\r\n  const initialState = {\r\n    title: \"\",\r\n    ingredients: ingredients,\r\n    instructions: \"\",\r\n  };\r\n  const [snackData, setSnackData] = useState(initialState);\r\n\r\n  const saveData = ({name, value}) => {\r\n    setSnackData({\r\n      ...snackData,\r\n      [name]: value //stringify here separates all letters into individual strings, no errors\r\n    })\r\n  }\r\n\r\n  const changeIngHandler = (e) => {\r\n    setIngredients({\r\n     \r\n      [e.target.name]:e.target.value\r\n    })\r\n  }\r\n  const addIng = (e) =>  {\r\n\r\n    e.preventDefault();\r\n    saveData({\r\n      name:\"ingredients\",\r\n      value: [...snackData.ingredients, ingredients.ingredients]  //stringify here: error, can't parse\r\n    })\r\n\r\n  /*   const ings = breakfastData.ingredients.map((i) => {\r\n      return (\r\n        i.ingredients\r\n      )\r\n      \r\n    }) */\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchSnacks();\r\n  }, []);\r\n\r\n  async function fetchSnacks() {\r\n    const apiData = await API.graphql({ query: listSnacks });\r\n    const snackFromAPI = apiData.data.listSnacks.items;\r\n    await Promise.all(\r\n      snackFromAPI.map(async (recipe) => {\r\n        if (recipe.image) {\r\n          const image = await Storage.get(recipe.image);\r\n          recipe.image = image;\r\n          //      console.log(recipe.image);\r\n        }\r\n      })\r\n    );\r\n    setSnacks(snackFromAPI);\r\n    console.log(apiData.data.listSnacks.items);\r\n  }\r\n\r\n  async function deleteSnack({ id }) {\r\n    const newSnackArray = snacks.filter((recipe) => recipe.id !== id);\r\n    setSnacks(newSnackArray);\r\n    await API.graphql({\r\n      query: deleteSnacksMutation,\r\n      variables: { input: { id } },\r\n    });\r\n  }\r\n\r\n  // create a new recipe\r\n  async function createSnack() {\r\n    if (!snackData.title || !snackData.ingredients || !snackData.instructions)\r\n      return;\r\n      snackData.ingredients = JSON.stringify(snackData.ingredients)\r\n    let savedSnack = await API.graphql({\r\n      query: createSnackMutation,\r\n      variables: { input: snackData },\r\n    });\r\n    if (snackData.image) {\r\n      const image = await Storage.get(snackData.image);\r\n      savedSnack.data.createSnack.image = image;\r\n    }\r\n    setSnacks([...snacks, savedSnack.data.createSnack]);\r\n\r\n    setSnackData(initialState);\r\n\r\n\r\n  }\r\n\r\n\r\n  console.log(snackData)\r\n  return (\r\n    <div>\r\n      <Router>\r\n        <Switch>\r\n          <Route path={`/:category/:postId`}>\r\n            <FullRecipe />\r\n          </Route>\r\n          <Route path={match.path}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"h5\">Ilta- ja välipalat</Typography>\r\n              </Grid>\r\n              {snacks.map((item) => {\r\n                return (\r\n                  <Grid item xs={12} sm={4}>\r\n                    <RecipeCard\r\n                      title={item.title}\r\n                      img={item.image}\r\n                      link={`${match.url}/${item.id}`}\r\n                      remove={() => deleteSnack(item)}\r\n                    />\r\n                  </Grid>\r\n                );\r\n              })}\r\n              <Grid item xs={12}>\r\n                <AddRecipe\r\n                  recipeData={snackData}\r\n                  setRecipeData={setSnackData}\r\n                  createRecipe={createSnack}\r\n                  category={\"välipala\"}\r\n                  addIng={addIng}\r\n                  changeIngHandler={changeIngHandler}\r\n               \r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Snacks;\r\n","C:\\Users\\elisabet\\Desktop\\reseptit\\src\\Recipes\\Dinner\\Dinner.js",["77"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Link,\r\n  useRouteMatch,\r\n  Switch,\r\n  Route,\r\n  BrowserRouter as Router,\r\n} from \"react-router-dom\";\r\nimport { listDinners } from \"../../graphql/queries\";\r\nimport { API, Storage } from \"aws-amplify\";\r\nimport {\r\n  deleteDinner as deleteDinnerMutation,\r\n  createDinner as createDinnerMutation,\r\n} from \"../../graphql/mutations\";\r\nimport RecipeCard from \"../RecipeCard\";\r\n\r\nimport AddRecipe from \"../AddRecipe\";\r\nimport FullRecipe from \"../FullRecipe\";\r\nimport { Grid, Typography } from \"@material-ui/core\";\r\n\r\nconst Dinner = () => {\r\n  const [dinner, setDinner] = useState([]);\r\n  const [ingredients, setIngredients] = useState([])\r\n\r\n  let match = useRouteMatch();\r\n\r\n  const initialState = {\r\n    title: \"\",\r\n    ingredients: \"\",\r\n    instructions: \"\",\r\n  };\r\n  const [dinnerData, setDinnerData] = useState(initialState);\r\n\r\n  const saveData = ({name, value}) => {\r\n    setDinnerData({\r\n      ...dinnerData,\r\n      [name]: value //stringify here separates all letters into individual strings, no errors\r\n    })\r\n  }\r\n\r\n  const changeIngHandler = (e) => {\r\n    setIngredients({\r\n     \r\n      [e.target.name]:e.target.value\r\n    })\r\n  }\r\n  const addIng = (e) =>  {\r\n\r\n    e.preventDefault();\r\n    saveData({\r\n      name:\"ingredients\",\r\n      value: [...dinnerData.ingredients, ingredients.ingredients]  //stringify here: error, can't parse\r\n    })\r\n\r\n  /*   const ings = breakfastData.ingredients.map((i) => {\r\n      return (\r\n        i.ingredients\r\n      )\r\n      \r\n    }) */\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchDinners();\r\n  }, []);\r\n\r\n  async function fetchDinners() {\r\n    const apiData = await API.graphql({ query: listDinners });\r\n    const dinnerFromAPI = apiData.data.listDinners.items;\r\n    await Promise.all(\r\n      dinnerFromAPI.map(async (recipe) => {\r\n        if (recipe.image) {\r\n          const image = await Storage.get(recipe.image);\r\n          recipe.image = image;\r\n          //      console.log(recipe.image);\r\n        }\r\n      })\r\n    );\r\n    setDinner(dinnerFromAPI);\r\n    //  console.log(breakfastFromAPI);\r\n  }\r\n\r\n  // DELETE dinner\r\n\r\n  async function deleteDinner({ id }) {\r\n    const newDinnerArray = dinner.filter((recipe) => recipe.id !== id);\r\n    setDinner(newDinnerArray);\r\n    await API.graphql({\r\n      query: deleteDinnerMutation,\r\n      variables: { input: { id } },\r\n    });\r\n  }\r\n\r\n  // create a new recipe\r\n  async function createDinner() {\r\n    if (\r\n      !dinnerData.title ||\r\n      !dinnerData.ingredients ||\r\n      !dinnerData.instructions\r\n    )\r\n      return;\r\n      dinnerData.ingredients = JSON.stringify(dinnerData.ingredients)\r\n    let savedDinner = await API.graphql({\r\n      query: createDinnerMutation,\r\n      variables: { input: dinnerData },\r\n    });\r\n    if (dinnerData.image) {\r\n      const image = await Storage.get(dinnerData.image);\r\n      savedDinner.data.createDinner.image = image;\r\n    }\r\n    setDinner([...dinner, savedDinner.data.createDinner]);\r\n\r\n    setDinnerData(initialState);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Router>\r\n        <Switch>\r\n          <Route path={\"/:category/:postId\"}>\r\n            <FullRecipe />\r\n          </Route>\r\n          <Route path={match.path}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"h5\">Päiväruuat</Typography>\r\n              </Grid>\r\n              {dinner.map((item) => {\r\n                return (\r\n                  <Grid item xs={12} sm={4}>\r\n                    <RecipeCard\r\n                      title={item.title}\r\n                      img={item.image}\r\n                      link={`${match.url}/${item.id}`}\r\n                      remove={() => deleteDinner(item)}\r\n                    />\r\n                  </Grid>\r\n                );\r\n              })}\r\n              <Grid item xs={12}>\r\n                <AddRecipe\r\n                  recipeData={dinnerData}\r\n                  setRecipeData={setDinnerData}\r\n                  createRecipe={createDinner}\r\n                  category={\"päiväruoka\"}\r\n                  addIng={addIng}\r\n                  changeIngHandler={changeIngHandler}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dinner;\r\n","C:\\Users\\elisabet\\Desktop\\reseptit\\src\\Recipes\\FullRecipe.js",["78"],"C:\\Users\\elisabet\\Desktop\\reseptit\\src\\Recipes\\RecipeCard.js",[],"C:\\Users\\elisabet\\Desktop\\reseptit\\src\\Recipes\\AddRecipe.js",["79","80","81"],"import React, { useState, useEffect } from \"react\";\r\nimport { API, Storage } from \"aws-amplify\";\r\nimport {\r\n  Grid,\r\n  Card,\r\n  Typography,\r\n  InputLabel,\r\n  TextField,\r\n  TextareaAutosize,\r\n  Button,\r\n  makeStyles,\r\n} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n  button: {\r\n    color: \"black\",\r\n    backgroundColor: \"lightgrey\",\r\n  },\r\n});\r\nconst AddRecipe = ({ recipeData, setRecipeData, createRecipe, category, addIng, changeIngHandler }) => {\r\n \r\n  const classes = useStyles();\r\n  /*   useEffect(() => {\r\n    fetchRecipes();\r\n    console.log(\"fetch1\");\r\n  }, []); */\r\n\r\n  async function onChange(e) {\r\n    if (!e.target.files[0]) return;\r\n    const file = e.target.files[0];\r\n    setRecipeData({ ...recipeData, image: file.name });\r\n    await Storage.put(file.name, file);\r\n    /*     fetchRecipes(); */\r\n  }\r\n\r\n\r\n\r\n  const recipeHandler = (e) => {\r\n    setRecipeData({\r\n      ...recipeData,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  /*   async function fetchRecipes() {\r\n    const apiData = await API.graphql({ query: [listRecipes] });\r\n    const recipeFromAPI = apiData.data[listRecipes].items;\r\n    console.log(recipeFromAPI);\r\n    await Promise.all(\r\n      recipeFromAPI.map(async (recipe) => {\r\n        if (recipe.image) {\r\n          const image = await Storage.get(recipe.image);\r\n          recipe.image = image;\r\n        }\r\n        return recipe;\r\n      })\r\n    );\r\n    setRecipe(apiData.data.listRecipes.items);\r\n  } */\r\n  /* \r\n  async function createRecipe() {\r\n    if (\r\n      !recipeData.title ||\r\n      !recipeData.ingredients ||\r\n      !recipeData.instructions\r\n    )\r\n      return;\r\n    await API.graphql({\r\n      query: createRecipeMutation,\r\n      variables: { input: recipeData },\r\n    });\r\n    if (recipeData.image) {\r\n      const image = await Storage.get(recipeData.image);\r\n      recipeData.image = image;\r\n    }\r\n    setRecipe([...recipe, recipeData]);\r\n  } */\r\n\r\n  return (\r\n    <Card style={{ margin: \"2rem\" }}>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n        spacing={2}\r\n      >\r\n        <Grid item>\r\n          <Typography variant=\"h6\">Lisää {category}</Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <InputLabel>Reseptin nimi</InputLabel>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            type=\"text\"\r\n            name=\"title\"\r\n            value={recipeData.title}\r\n            onChange={recipeHandler}\r\n          ></TextField>\r\n        </Grid>\r\n        <Grid item>\r\n          <InputLabel>Ainesosat</InputLabel>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            type=\"text\"\r\n            name=\"ingredients\"\r\n            value={recipeData.ingredients.ingredients}\r\n            onChange={changeIngHandler}\r\n          ></TextField>\r\n           <Button onClick={addIng}>Lisää listaan</Button>\r\n        </Grid>\r\n        {/*       {newRecipe.ingredients.map((i) => (\r\n        <div>\r\n          <li value={i.ingredients}>{i.ingredients}</li>\r\n          <button onClick={() => removeIng(i.ingredients)}>poista</button>\r\n        </div>\r\n      ))} */}\r\n        <Grid item>\r\n          <InputLabel>Ohjeet</InputLabel>\r\n          <TextareaAutosize\r\n            style={{ width: 300 }}\r\n            rowsMin={10}\r\n            type=\"text\"\r\n            name=\"instructions\"\r\n            value={recipeData.instructions}\r\n            onChange={recipeHandler}\r\n          ></TextareaAutosize>\r\n        </Grid>\r\n        <Grid item>\r\n          <InputLabel>Lisää kuva:</InputLabel>\r\n\r\n          <input type=\"file\" onChange={onChange} />\r\n        </Grid>\r\n        <Grid item>\r\n          <Button\r\n            onClick={createRecipe}\r\n            variant=\"outlined\"\r\n            className={classes.button}\r\n          >\r\n            Lisää resepti\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default AddRecipe;\r\n","C:\\Users\\elisabet\\Desktop\\reseptit\\src\\graphql\\mutations.js",[],"C:\\Users\\elisabet\\Desktop\\reseptit\\src\\graphql\\queries.js",[],"C:\\Users\\elisabet\\Desktop\\reseptit\\src\\aws-exports.js",[],"C:\\Users\\elisabet\\Desktop\\reseptit\\src\\Recipes\\EditRecipe.js",["82","83","84","85"],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":6,"column":3,"nodeType":"92","messageId":"93","endLine":6,"endColumn":7},{"ruleId":"90","severity":1,"message":"94","line":3,"column":3,"nodeType":"92","messageId":"93","endLine":3,"endColumn":12},{"ruleId":"90","severity":1,"message":"91","line":4,"column":3,"nodeType":"92","messageId":"93","endLine":4,"endColumn":7},{"ruleId":"90","severity":1,"message":"95","line":16,"column":22,"nodeType":"92","messageId":"93","endLine":16,"endColumn":45},{"ruleId":"90","severity":1,"message":"96","line":134,"column":18,"nodeType":"92","messageId":"93","endLine":134,"endColumn":31},{"ruleId":"90","severity":1,"message":"91","line":3,"column":3,"nodeType":"92","messageId":"93","endLine":3,"endColumn":7},{"ruleId":"90","severity":1,"message":"91","line":4,"column":3,"nodeType":"92","messageId":"93","endLine":4,"endColumn":7},{"ruleId":"90","severity":1,"message":"91","line":3,"column":3,"nodeType":"92","messageId":"93","endLine":3,"endColumn":7},{"ruleId":"97","severity":1,"message":"98","line":38,"column":6,"nodeType":"99","endLine":38,"endColumn":8,"suggestions":"100"},{"ruleId":"90","severity":1,"message":"101","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":25},{"ruleId":"90","severity":1,"message":"102","line":1,"column":27,"nodeType":"92","messageId":"93","endLine":1,"endColumn":36},{"ruleId":"90","severity":1,"message":"103","line":2,"column":10,"nodeType":"92","messageId":"93","endLine":2,"endColumn":13},{"ruleId":"90","severity":1,"message":"104","line":5,"column":29,"nodeType":"92","messageId":"93","endLine":5,"endColumn":45},{"ruleId":"90","severity":1,"message":"105","line":5,"column":71,"nodeType":"92","messageId":"93","endLine":5,"endColumn":81},{"ruleId":"90","severity":1,"message":"95","line":6,"column":31,"nodeType":"92","messageId":"93","endLine":6,"endColumn":54},{"ruleId":"97","severity":1,"message":"106","line":18,"column":8,"nodeType":"99","endLine":18,"endColumn":10,"suggestions":"107"},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'useParams' is defined but never used.","'updateBreakfastMutation' is defined but never used.","'editBreakfast' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'category', 'fetchBreakfast', 'fetchDinner', 'fetchLunch', and 'fetchSnack'. Either include them or remove the dependency array.","ArrayExpression",["110"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'API' is defined but never used.","'TextareaAutosize' is defined but never used.","'Typography' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchBreakfast'. Either include it or remove the dependency array.",["111"],"no-global-assign","no-unsafe-negation",{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},"Update the dependencies array to be: [category, fetchBreakfast, fetchDinner, fetchLunch, fetchSnack]",{"range":"116","text":"117"},"Update the dependencies array to be: [fetchBreakfast]",{"range":"118","text":"119"},[1016,1018],"[category, fetchBreakfast, fetchDinner, fetchLunch, fetchSnack]",[582,584],"[fetchBreakfast]"]